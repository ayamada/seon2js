export const doThrow = function (exc) { throw exc };
export const throwNewError = ( (msg) => ((doThrow)((new (Error)((msg))))));
const tneIllegalCall = ( (... _) => ((throwNewError)(("illegal call"))));
export const unquote = tneIllegalCall;
export const unquoteSplicing = tneIllegalCall;
export const deref = ( (x) => ((throwNewError)(("not implemented yet"))));
export const isArray = ( (a) => ((Array.isArray)((a))));
export const isVector = ( (a) => (((isArray)((a)))&&(a['%V'])));
export const isObject = ( (a) => ((a?.constructor)===(Object)));
export const isString = ( (a) => ((a?.constructor)===(String)));
export const isNully = ( (a) => ((a)==(null)));
export const _LT_ = ( (a, b) => ((a < b)));
export const _LT__EQ_ = ( (a, b) => ((a <= b)));
export const _GT_ = ( (a, b) => ((a > b)));
export const _GT__EQ_ = ( (a, b) => ((a >= b)));
export const isNonNegativeInteger = ( (a) => (((Number.isInteger)((a)))&&((_LT__EQ_)((0), (a)))));
export const aget = ( (a, b) => {const isAStruct = ((isArray)((a)))||((isObject)((a)));
const isBStruct = ((isArray)((b)))||((isObject)((b)));
const isAKey = ((isString)((a)))||((isNonNegativeInteger)((a)));
const isBKey = ((isString)((b)))||((isNonNegativeInteger)((b)));
const struct = (isAStruct) ? (a) : (b);
const key = (isAStruct) ? (b) : (a);
return ((((isAStruct)&&(isBKey))||((isBStruct)&&(isAKey))) ? (struct[key]) : undefined)});
export const car = ( (x) => ((x)[0]));
export const cdr = ( (x) => (x?.slice?.[1]));
export const cadr = ( (x) => ((x)[1]));
export const _EQ__EQ__EQ_ = ( (a, b) => ((a)===(b)));
export const _EQ__EQ_ = ( (a, b) => ((a)==(b)));
export const _EQ_ = ( (a, b) => ((a)===(b)));
export const _BANG__EQ_ = ( (a, b) => ((a)!==(b)));
export const not_EQ_ = ( (a, b) => ((a)!==(b)));
export const not = ( (a) => (!(a)));
export const _PLUS_ = ( (... args) => ((args.reduce)((( (acc, v) => ((acc)+(v)))))));
export const str = ( (... args) => ((args.reduce)((( (acc, v) => ((acc)+(v)))), (""))));
export const object = ( (... kvs) => ((throwNewError)(("not implemented yet"))))