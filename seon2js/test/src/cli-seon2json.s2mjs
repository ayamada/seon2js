(import [[default :as fs]] "node:fs")
(import [[default :as process]] "node:process")
(import [[default :as path]] "node:path")
;;; import { default as fs } from "node:fs";
;;; import { default as process } from "node:process";
;;; import { default as path } from "node:path";


(import-*-as seon-util "seon/util")
;;; import * as seonUtil from "seon/util";


(export (const mkdirp-options {:recursive true :mode (rawjs "0o755")}))
(constfn mkdirp [path] (fs.mkdirSync path mkdirp-options))
; = (const mkdirp (fn [path] (fs.mkdirSync path mkdirp-options)))
; = (const mkdirp (function [path] (fs.mkdirSync path mkdirp-options)))
;;; const mkdirp = (path) => fs.mkdirSync(path, {recursive: true, mode: 0o755});


(constfn convert-seon-to-json [src-path dst-path]
  (const seon-string (fs.readFileSync src-path "utf-8"))
  (const json-string
    (seon-util.convert-seon-string-to-json-string seon-string
                                                  dst-path
                                                  src-path))
  (mkdirp (path.dirname dst-path))
  (fs.writeFileSync dst-path json-string))
;;; const convertSeonToJson = (srcPath, dstPath) => {
;;;   const seonString = fs.readFileSync(srcPath, "utf-8");
;;;   const jsonString = seonUtil.convertSeonStringToJsonString(seonString, dstPath, srcPath);
;;;   mkdirp(path.dirname(dstPath));
;;;   fs.writeFileSync(dstPath, jsonString);
;;; };


(constfn exchange-ext [target-path new-ext]
  (const path-parsed (object ... (path.parse target-path)))
  (set! path-parsed.ext new-ext)
  (delete! path-parsed.base)
  (path.format path-parsed))
;;; const exchangeExt = (targetPath, newExt) => {
;;;   const pathParsed = { ... path.parse(targetPath) };
;;;   pathParsed.ext = newExt;
;;;   delete pathParsed.base;
;;;   return path.format(pathParsed);
;;; };


(constfn display-usage-and-exit []
  (console.log
   "usage:
    node ./cli-seon2json.mjs path/to/src.seon path/to/dst.json")
  (process.exit 1))
;;; const displayUsageAndExit = () => {
;;;   console.log(`usage:
;;;     node ./cli-seon2json.mjs path/to/src.seon path/to/dst.json`);
;;;   process.exit(1);
;;; };


(constfn main [src dst]
  (when-not src
    (display-usage-and-exit))
  (when-not dst
    (set! dst (exchange-ext src ".json"))
    (when (= src dst)
      (display-usage-and-exit)))
  (when-not (fs.existsSync src)
    (console.log (str "src not found: " src))
    (process.exit 1))
  (convert-seon-to-json src dst))
;;; const main = (src, dst) => {
;;;   if (!src) { displayUsageAndExit() }
;;;   if (!dst) {
;;;     dst = exchangeExt(src, ".json");
;;;     if (src === dst) { displayUsageAndExit() }
;;;   }
;;;   if (!fs.existsSync(src)) {
;;;     console.log(`src not found: ${src}`);
;;;     process.exit(1);
;;;   }
;;;   convertSeonToJson(src, dst);
;;; };


(main (aget process.argv 2)
      (aget process.argv 3))
;;; main(process.argv[2], process.argv[3]);


;;; vim:set ft=clojure:
